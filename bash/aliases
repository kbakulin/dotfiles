# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# Detect which "ls" flavor is in use
if ls --color > /dev/null 2>&1; then # GNU "ls"
    colorflag="--color"
else # OS X "ls"
    colorflag="-G"
fi
alias ls="command ls ${colorflag}"
alias sl='ls'
if ls -T > /dev/null 2>&1; then
    alias l='ls -lhT'
else
    alias l='ls -lh'
fi
alias ll='ls -lha'

alias grep='grep -a --color=auto'
alias egrep='egrep -a --color=auto'
alias G='egrep'
alias GP='grep -P'

alias L='less'

alias tree='tree -a -I ".git|.svn|CVS|.DS_Store|*.pyc"'
alias t='tail'
alias j='jobs'
alias jj='jobs'

# Find file by template
ff() {
    find . -type f -iname '*'$*'*' -ls ;
}

 # Find file by template and execute command
fe() {
    find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \; ;
}

# Text editors
if ( __is_osx ); then
    alias m='subl'
    alias ge='gvim --remote-tab-silent'
else
    alias m='vim'
fi
alias e='vim'
alias ee='e .'
alias mm='m .'

# Git
# Check "gitconfig" file for full aliases
alias g='git'
alias ga='git a'
alias gap='git ap'
alias gb='git b'
alias gba='git ba'
alias gbm='git bm'
alias gc='git c'
alias gca='git ca'
alias gci='git ci'
alias gco='git co'
alias gd='git d'
alias gdc='git dc'
alias gf='git flow'
alias gfff='git fff'
alias gffs='git fss'
alias gg='git status -sb'
alias gl='git lg -30'
alias gll='git lg'
alias glp='git lp'
alias gm='git m'
alias gmm='git mm'
alias gpl='git pl && git remote prune origin'
alias gps='git push'
alias gr='git r'
alias gra='git ra'
alias grc='git rc'

alias git-new-workdir='/usr/local/share/git-core/contrib/workdir/git-new-workdir'
alias ungit='find . -name '.git' -exec rm -rf {} \;'

if which stree > /dev/null 2>&1; then
  alias gx='stree $(git rev-parse --show-toplevel)'
fi

if which tig > /dev/null 2>&1; then
  alias gt='tig .'
fi

# Python
alias p='python'
alias pp='ipython'
alias p3='python3'
alias lssitepackages="lssitepackages -lh ${colorflag}"
alias rmpyc='find . -type f -iname "*.pyc" -delete'

function take() {
    mkdir -p "$1"
    cd "$1"
}

# Start ssh-agent and load key(s).
# May be useful when our key uses passphrase.
function ssh-agent-start() {
    # Start ssh-agent with bash shell
    eval $(ssh-agent -s)

    # Add key(s). Will ask for passphrase if needed
    for f in $(ls ~/.ssh | grep -e "^id_[r|d]sa[^.]*$")
    do
        ssh-add -k "~/.ssh/$f"
    done

    # Listing keys currently represented by the agent
    ssh-add -l
}


# Kill the current ssh-agent
function ssh-agent-stop() {
    ssh-agent -k
}

function c() {
    cd ~/code/$1;
}

function ce() {
    cd ~/code_ext/$1;
}

function d() {
    cd ~/Downloads/$1;
}

function db() {
    cd ~/Dropbox/$1;
}

# Set the terminal's title
function title() {
    if [[ -n "${TMUX+set}" ]]; then
        tmux rename-window "$@"
    else
        case $TERM in
            *xterm*|ansi)
                echo -ne '\033]0;'"$@"'\a'
                ;;
        esac
    fi
}

# Set terminal's title to current dir name
function dtitle() {
    title $(basename $PWD)
}


if which brew > /dev/null 2>&1; then
    function rpmunpack() {
        $(brew --cellar)/rpm2cpio/1.3/bin/rpm2cpio.pl $1 | cpio -ivd
    }
else
    function rpmunpack() {
        rpm2cpio $1 | cpio -ivd
    }
fi


# Install http://www.soimort.org/translate-shell before
# For OS X
# brew install http://www.soimort.org/translate-shell/translate-shell.rb
if which trans > /dev/null 2>&1; then
    function ru() {
        trans en:ru "$*"
    }

    function en() {
        trans ru:en "$*"
    }
fi


function ctags-site-packages() {
    if [[ -d $VIRTUAL_ENV ]]; then
        ctags -R -f $VIRTUAL_ENV/tags $VIRTUAL_ENV/lib/python*/site-packages
    else
        echo "VIRTUAL_ENV not set"
    fi
}
