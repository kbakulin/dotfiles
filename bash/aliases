alias ..='cd ..'
alias ...='cd ../..'
if ( __is_osx ); then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
fi
alias l='ls -lhT'
alias ll='ls -lha'

alias grep='grep -a --color=auto'
alias egrep='egrep -a --color=auto'
alias G='egrep'
alias GP='grep -P'

alias L='less'
alias M='more'

alias tree='tree -a -I ".git|.svn|CVS|.DS_Store|*.pyc"'
alias tf='tail -f'

# Text editors
if ( __is_osx ); then
    # Create symlink before
    # ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl
    alias m='subl'
    alias mm='m .'
    alias e='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n'
    alias em='open -a Emacs'
else
    alias e='emacsclient -n -a emacs'
    alias em='emacs'
fi
alias ee='e .'

# Git
alias g='git'
alias gg='git status -sb'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git lg -20'
alias gll='git lg'
alias gco='git checkout'
alias gb='git branch -vv'
alias gba='git branch -avv'
alias gbm="git branch --no-merged "
alias gpl='git pull --rebase && git remote prune origin'
alias gps='git push'
alias gm="git merge --no-ff"
alias gmm="git merge"
alias gf="git flow feature"
alias gfs="git flow feature start"
alias gff="git flow feature finish"
alias ungit="find . -name '.git' -exec rm -rf {} \;"

if ( __is_osx ); then
    if which stree > /dev/null 2>&1; then
      alias gx='stree .'
    fi
fi

# Python
alias p='python'
alias pp='ipython'
if ( __is_osx ); then
    alias lssitepackages='lssitepackages -lhG'
else
    alias lssitepackages='lssitepackages -lh --color=auto'
fi
alias rmpyc='find . -type f -name "*.pyc" -print0 | xargs -0 rm'


function cl() {
    cd $1; l
}

function take() {
    mkdir -p "$1"
    cd "$1"
}

# Start ssh-agent and load key(s).
# May be useful when our key uses passphrase.
function ssh-agent-start() {
    # Start ssh-agent with bash shell
    eval $(ssh-agent -s)

    # Add key(s). Will ask for passphrase if needed
    for f in `ls ~/.ssh | grep -e "^id_[r|d]sa[^.]*$"`
    do
        ssh-add -k "~/.ssh/$f"
    done

    # Listing keys currently represented by the agent
    ssh-add -l
}


# Kill the current ssh-agent
function ssh-agent-stop() {
    ssh-agent -k
}

function c() {
    cd ~/code/$1;
}

function ce() {
    cd ~/code_ext/$1;
}

function d() {
    cd ~/Downloads/$1;
}

# Create virtualenv with --no-site-packages option by default
function mkvirtualenv-no-site-packages() {
    mkvirtualenv --no-site-packages $*
}

# Create virtualenv and project for it with --no-site-packages option
# by default
function mkproject-no-site-packages() {
    mkproject --no-site-packages $*
}

# Set the terminal's title
function title() {
    case $TERM in
        *xterm*|ansi)
            echo -ne '\033]0;'"$@"'\a'
            ;;
    esac
}

# Set terminal's title to current dir name
function dirname-to-title() {
    title $(basename $(pwd))
}
alias dtitle="dirname-to-title"

#
# Mac OS X specific
#
if ( __is_osx ); then
    # Copy current dir path to system clipboard
    function pwdcopy() {
        pwd | tr -d '\n' | pbcopy
    }

    # Copy name of current dir to system clipboard
    function dirnamecopy() {
        basename $(pwd) | tr -d '\n' | pbcopy
    }

    # Open a manpage in Preview, which can be saved to PDF
    function pman() {
       man -t "${1}" | open -f -a "/Applications/Preview.app"
    }

    # Open a manpage in the browser
    function bman() {
      man "${1}" | man2html | browser
    }

    # Reveal current or provided folder in Path Finder
    function pf() {
      local target_path="$(cd ${1:-"$PWD"} && PWD)"
      osascript 2>/dev/null <<-END
        tell app "Path Finder"
          reveal POSIX file("$target_path")
          activate
        end tell
END
    }
fi



if ( __is_osx ); then
    function rpmunpack() {
        /usr/local/Cellar/rpm2cpio/1.3/bin/rpm2cpio.pl $1 | cpio -ivd
    }
else
    function rpmunpack() {
        rpm2cpio $1 | cpio -ivd
    }
fi
