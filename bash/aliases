alias ..='cd ..'
alias ...='cd ../..'
if ( __is_osx ); then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
fi
alias l='ls -lh'
alias ll='ls -lha'

alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias tree='tree -a -I ".git|.svn|CVS|.DS_Store|*.pyc"'
alias t='tree -C'
alias G='egrep'
alias L='less'
alias M='more'

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Text editors
if ( __is_osx ); then
    alias m='mate'
    alias mm='mate .'
    alias e='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n'
    alias em='open -a Emacs'
else
    alias e='emacsclient -n -a emacs'
    alias em='emacs'
fi
alias ee='e .'

# Git
alias g='git'
alias gg='git status -sb'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git lg -5'
alias gll='git lg'
alias gco='git checkout'
alias gb='git branch'
alias gba='git branch -a'
alias ungit="find . -name '.git' -exec rm -rf {} \;"
if ( __is_osx ); then
    alias gx='gitx'
fi

# Python
alias p='python'
alias pp='ipython'
if ( __is_osx ); then
    alias lssitepackages='lssitepackages -lhG'
else
    alias lssitepackages='lssitepackages -lh --color=auto'
fi
alias rmpyc='find . -type f -name "*.pyc" -print0 | xargs -0 rm'

# Django
alias da="django-admin.py"
alias dm="./manage.py"

function cl() {
    cd $1; l
}

function take() {
    mkdir -p "$1"
    cd "$1"
}

# Start ssh-agent and load key(s).
# May be useful when our key uses passphrase.
function ssh-agent-start() {
    # Start ssh-agent with bash shell
    eval `ssh-agent -s`

    # Add key(s). Will ask for passphrase if needed
    for f in `ls ~/.ssh | grep -e "^id_[r|d]sa[^.]*$"`
    do
        ssh-add -k "~/.ssh/$f"
    done

    # Listing keys currently represented by the agent
    ssh-add -l
}


# Kill the current ssh-agent
function ssh-agent-stop() {
    ssh-agent -k
}

# Change directory to code project
function c() {
    cd ~/code/$1;
}

# Change directory to code external project
function ce() {
    cd ~/code_ext/$1;
}

# Create virtualenv with --no-site-packages option by default
function mkvirtualenv-no-site-packages() {
    mkvirtualenv --no-site-packages $*
}

# Create virtualenv and project for it with --no-site-packages option
# by default
function mkproject-no-site-packages() {
    mkproject --no-site-packages $*
}

# Set the terminal's title
function title() {
    case $TERM in
        *xterm*|ansi)
            echo -ne '\033]0;'"$@"'\a'
            ;;
    esac
}

# Set terminal's title to current dir name
function dirname-to-title() {
    title $(basename $(pwd))
}
alias dtitle="dirname-to-title"

#
# Mac OS X specific
#
if ( __is_osx ); then
    # Copy current dir path to system clipboard
    function pwdcopy() {
        pwd | tr -d '\n' | pbcopy
    }

    # Copy name of current dir to system clipboard
    function dircopyname() {
        basename $(pwd) | tr -d '\n' | pbcopy
    }

    # Open github page for specified user.
    function ghub() {
        local user=$1
        if [ -z "$1" ]; then
            user="underself"
        fi
        open "https://github.com/$user"
    }

    # Open a manpage in Preview, which can be saved to PDF
    function pman() {
       man -t "${1}" | open -f -a "/Applications/Preview.app"
    }

    # Open a manpage in the browser
    function bman() {
      man "${1}" | man2html | browser
    }

    # Reveal current or provided folder in Path Finder
    function pf() {
      local target_path="$(cd ${1:-"$PWD"} && PWD)"
      osascript 2>/dev/null <<-END
        tell app "Path Finder"
          reveal POSIX file("$target_path")
          activate
        end tell
END
    }
fi
